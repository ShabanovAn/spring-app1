package JavaCore.LambdaTest;

/**
Лямбды и локальные переменные
Лямбда-выражение может использовать переменные,
которые объявлены во вне в более общей области видимости - на уровне класса или метода,
в котором лямбда-выражение определено. Однако в зависимости от того,
как и где определены переменные, могут различаться способы их использования в лямбдах.
 Рассмотрим первый пример - использования переменных уровня класса:
 */


public class LambdaApp3 {
    static int x =10;
    static int y =20;
    public static void main(String[] args) {
        Operatioon operatioon = () -> {
            x = 30;
            return x + y;
        };
        System.out.println(operatioon.calulate()); //50
        System.out.println(x); //30 значение x изменилось

        //Переменные x и y объявлены на уровне класса, и в лямбда-выражении мы их можем получить и даже изменить.
        // Так, в данном случае после выполнения выражения изменяется значение переменной x.





//        int n=70;
//        int m=30;
//        Operation op = ()->{
//
//            //n=100; - так нельзя сделать
//            return m+n;
//        };
//        // n=100;  - так тоже нельзя
//        System.out.println(op.calculate()); // 100

        //Локальные переменные уровня метода мы также можем использовать в лямбдах, но изменять их значение нельзя.
        // Если мы попробуем это сделать, то среда разработки (Netbeans) может нам высветить ошибку и то, что такую
        // переменную надо пометить с помощью ключевого слова final, то есть сделать константой: final int n=70;.
        // Однако это необязательно.Более того, мы не сможем изменить значение переменной, которая используется в лямбда-выражении,
        // вне этого выражения. То есть даже если такая переменная не объявлена как константа, по сути она является константой.
    }
}

interface Operatioon {
    int calulate();

}

//    Блоки кода в лямбда-выражениях
//        Существуют два типа лямбда-выражений: однострочное выражение и блок кода.
//        Примеры однострочных выражений демонстрировались выше. Блочные выражения обрамляются фигурными скобками.
//        В блочных лямбда-выражениях можно использовать внутренние вложенные блоки, циклы, конструкции
//        if, switch, создавать переменные и т.д. Если блочное лямбда-выражение должно возвращать значение,
//        то явным образом применяется оператор return:

//        Operationable operation = (int x, int y)-> {
//
//        if(y==0)
//        return 0;
//        else
//        return x/y;
//        };
//
//        System.out.println(operation.calculate(20, 10)); //2
//        System.out.println(operation.calculate(20, 0)); //0
